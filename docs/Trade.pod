
=head1 Trade Ministry Methods

The Trade Ministry is accessible via the URL C</trade>. It allows you to send cargo ships to other players with trade goods. Due to the vast distance of space, you may only trade with other players in your zone.

The list of methods below represents changes and additions to the methods that all L<Buildings> share.



=head2 accept_from_market

Accept a trade offer from the list of available trades. See C<view_market>.

Accepts either fixed arguments or a hash of named parameters

 ( session_id, building_id, trade_id)
 ( parameter_hash )
    
=head3 session_id (required)

A session ID.

=head3 building_id (required)

This building's ID

=head3 trade_id (required)

The unique ID of the trade being accepted.

=head3 RESPONSE

Returns the same as C<view>


=head2 add_fleet_to_supply_duty

Take a fleet from your space port and put them on duty supporting your supply chains.

Accepts either fixed arguments or a hash of named parameters

 ( session_id, building_id, fleet_id )
 ( parameter_hash )

Throws 1009.

=head3 session_id (required)

A Session ID.

=head3 building_id (required)

The unique ID of the Trade Ministry.

=head3 fleet_id (required)

The unique ID of the ship you want to add to the fleet.

=head3 quantity (optional)

Only available in the named argument call method. The number of ships to put on duty.
Defaults to 1 ship.

=head3 RESPONSE

Returns the same as C<view>


=head2 add_fleet_to_waste_duty

Take a fleet from your space port and put them on duty supporting your waste chains.

Accepts either fixed arguments or a hash of named parameters

 ( session_id, building_id, fleet_id )
 ( parameter_hash )

Throws 1009.

=head3 session_id (required)

A Session ID.

=head3 building_id (required)

The unique ID of the Trade Ministry.

=head3 fleet_id (required)

The unique ID of the ship you want to add to the fleet.

=head3 quantity (optional)

Only available in the named argument call method. The number of ships to put on duty.
Defaults to 1 ship.

=head3 RESPONSE

Returns the same as C<view>

=head2 add_to_market ( session_id, building_id, offer, ask, options )

Adds a trade to the market for others to see.

Accepts either fixed arguments or a hash of named parameters

 ( session_id, building_id, offer, ask, options )
 ( parameter_hash )

=head3 session_id (required)

A Session ID.

=head3 building_id (required)

The unique ID of the Trade Ministry.

=head3 offer (required)

An array reference of hash references of items you wish to trade.
There are five types of items you can trade via this mechanism.
They are C<resources> C<glyphs> C<plans> C<prisoners> and C<fleets>

 [
   {
     "type" : "bauxite",
     "quantity" : 10000
   },
   {
     "type" : "prisoner",
     "prisoner_id" : "id-goes-here"
   }
 ]

=over

=item resources

The hash reference for resources looks like:

 {
   "type" : "bauxite",
   "quantity" : 10000
 }

=over

=item type

The type of resource you want to trade. See C<get_stored_resources> to see what you have available.

=item quantity

The amount of the resource that you want to trade.

=back


=item glyphs

The hash reference for glyphs looks like this:

 {
   "type" : "glyph",
   "name : "bauxite",
   "quantity" : 3
 }
 
=over

=item type

Must be exactly C<glyph>.

=item name

The type of glyph you want to trade (must be an ore type name).

=item quantity

The number of glyphs of type C<name> that you want to trade 

=back


=item plans

The hash reference for plans looks like this:

 {
   "type" : "plan",
   "plan_type" : "Permanent_AlgaePond",
   "level" : 1,
   "extra_build_level" : 5,
   "quantity" : 4,
 }

=over

=item type

Must be exactly C<plan>.

=item plan_type

Same as returned by get_plan_summary.

=item level

Level of the plan being added.

=item extra_build_level

Extra level of plan to build to. Note this will be 0 except possibly where the level is 1.

=item quantity

Number of plans to add.

=back


=item prisoners

The hash reference for prisoners looks like:

 {
   "type" : "prisoner",
   "prisoner_id" : "id-goes-here"
 }

=over

=item type

Must be exactly C<prisoner>.

=item prisoner_id

The unique id of the spy that you want to trade. See the C<get_prisoners> method for a list of your prisoners.

=back


=item fleets

The hash reference for ships looks like:

 {
    "type" : "fleet",
    "fleet_id" : "id-goes-here",
    "quantity" : 3
 }

=over

=item type

Must be exactly C<fleet>.

=item fleet_id

The unique id of the fleet that you want to trade. See the C<get_fleets> method for a list of your fleets.

=back

=back

=head3 ask

A number representing the amount of essentia you are asking for this trade. Must be a number between 0.1 and 99.9.

=head3 options (optional)

A hash reference of options to modify the trade.

=over

=item fleet_id

The ID of the fleet you want to use to transport this trade. See C<get_trade_fleets> for details.

If you don't specify a fleet_id then it will take the first available fleet for the trade.

The quantity of ships to send will be based on the number of ships in the fleet and the cargo capacity
of each ship in the fleet.

=back




















=head2 get_ships ( session_id, building_id )

Returns a list of ships that may be traded. Used with the C<add_trade> method.

 {
    "ships" : [
        {
            "id" : "id-goes-here",
            "name" : "Enterprise",
            "type" : "probe",
            "hold_size" : 0,
            "speed" : 3900
        },
        ...
    ],
    "cargo_space_used_each" : 10000,
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.


=head2 get_prisoners ( session_id, building_id )

Returns a list of prisoners that may be traded. Used with the C<add_trade> method.

 {
    "prisoners" : [
        {
            "id" : "id-goes-here",
            "name" : "Jack Bauer",
            "level" : "5",
            "sentence_expires" : "01 31 2010 13:09:05 +0600"
        },
        ...
    ],
    "cargo_space_used_each" : 350,
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.


=head2 get_plans ( session_id, building_id )

Deprecated Method.  Please use get_plan_summary instead

=head2 get_plan_summary ( session_id, building_id )

Returns a list of plans that may be traded in summary form.
Used with the C<add_trade> method.

 {
    "plans" : [
        {
            "name" : "Intelligence Ministry",
            "plan_type" : "Intelligence",
            "level" : "7",
            "extra_build_level" : "0",
            "quantity" : "2"
        },
        ...
    ],
    "cargo_space_used_each" : 10000,
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building


=head2 get_glyphs ( session_id, building_id )

This API call is now deprecated, please use get_glyph_summary instead.

=head2 get_glyph_summary ( session_id, building_id )

Returns a summary of all glyphs that may be traded. Used with the C<add_trade> method.

 {
    "glyphs" : [
        {
            "id" : "id-goes-here",
            "name: : "bauxite",
            "type" : "bauxite",
            "quantity" : 2
        },
        ...
    ],
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.


=head2 withdraw_from_market ( session_id, building_id, trade_id )

Remove a trade that you have offered and collect the items up for trade.

 {
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.

=head3 trade_id

The unique id of the trade.




=head2 accept_from_market ( session_id, building_id, trade_id )

Accept a trade offer from the list of available trades. See C<view_market>.

Throws 1016.

 {
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.

=head3 trade_id

The unique id of the trade.



=head2 view_market ( session_id, building_id, [ page_number, filter ] )

Displays a list of trades available at the present time.

 {
    "trades" : [
        {
            "date_offered" : "01 31 2010 13:09:05 +0600",
            "id" : "id-goes-here",
            "ask" : 25,     # essentia
            "offer" : [
                "Level 21 spy named Jack Bauer (prisoner)",
                "4,000 bauxite",
                "gold glyph"
            ],
            "body" : {
                "id" : "id-goes-here"
            },
            "empire" : {
                "id" : "id-goes-here",
                "name" : "Earthlings"
            },
            "delivery: : {
                "duration" : 3600,            # travel time in seconds
            }
        },
        ...
    ],
    "trade_count" : 1047,
    "page_number" : 1,
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.

=head3 page_number

Optional. An integer representing the page of trades (25 per page) to return. Defaults to 1.

=head3 filter

Optional. A string which will narrow the offered trades to those who are offering a specific kind of object, such as ships. Filter options include: food ore water waste energy glyph prisoner ship plan




=head2 view_my_market ( session_id, building_id, [ page_number ] )

Displays a list of trades the current user has posted.

 {
    "trades" : [
        {
            "date_offered" : "01 31 2010 13:09:05 +0600",
            "id" : "id-goes-here",
            "ask" : 25,     # essentia
            "offer" : [
                "Level 21 spy named Jack Bauer (prisoner)",
                "4,000 bauxite",
                "gold glyph"
            ]
        },
        ...
    ],
    "trade_count" : 17,
    "page_number" : 1,
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.

=head3 page_number

An integer representing the page of trades (25 per page) to return. Defaults to 1.



=head2 get_trade_ships ( session_id, building_id, [ target_body_id ] )

Returns a list of the ships that could be used to do a trade.

 {
    "status" : { ... },
    "ships" : [
        {
           "id" : "id-goes-here",
           "type" : "cargo_ship",
           "name" : "SS Minnow",
           "estimated_travel_time" : 3600, # in seconds, one way
           ...
        },
        ...
    ]
 }


=head3 session_id

A session id.

=head3 building_id

The unique id of the trade ministry.

=head3 target_body_id

The unique id of the body you'll be shipping to. Optional. If included it will calculate the estimated travel time of the ships to this body.


=head2 get_waste_ships ( session_id, building_id )

Returns a list of the ships that are either working to transport waste or available.

 {
    "status" : { ... },
    "ships" : [
        {
           "id" : "id-goes-here",
           "type" : "scow",
           "task" : "Docked",
           "name" : "Dumper Truck 1",
           "speed" : 600,
           "hold_size" : 1234800,
        },
        ...
    ]
 }


=head3 session_id

A session id.

=head3 building_id

The unique id of the trade ministry.


=head2 get_supply_ships ( session_id, building_id )

Returns a list of the ships that are either working to transport supplies or available.

 {
    "status" : { ... },
    "ships" : [
        {
           "id" : "id-goes-here",
           "type" : "hulk",
           "task" : "Resource Chain",
           "name" : "Big Momma 1",
           "speed" : 1000,
           "hold_size" : 4000000,
        },
        ...
    ]
 }


=head3 session_id

A session id.

=head3 building_id

The unique id of the trade ministry.


=head2 view_supply_chains ( session_id, building_id )

Returns a list of the supply chains currently controlled by this Trade Ministry

 {
    "status" : { ... },
    "supply_chains" : [
      {
        "id" : "id-goes-here",
        "body" : {
          "id" : "id-goes-here",
          "name" : "Mars",
          "x" : 0,
          "y" : -123,
          ...
        },
        "building_id" : 1234567,
        "resource_hour" : 10000000,
        "resource_type" : 'water',
        "percent_transferred" : 95,
        "stalled" : 0,
      }
    ],
    "max_supply_chains" : 30
 }

Each supply-chain can transfer any amount of any one resource (food type, ore type
energy, waste or water). B<max_supply_chains> shows you how many Supply Chains
your Trade Ministry can handle.

The B<building_id> is the identifier for the Trade Ministry that is the source of the
supply chain.

The B<resource_type> is the name of the resource you wish to transfer (e.g. 'Gold');

The B<resource_hour> is the amount of that resource you wish to transfer each hour.

The B<percent_transferred> is the percentage of B<resource_hour> that is actually transferred.
This is based on the number of ships you have servicing the chain. If you have no ships then
the B<percent_transferred> will be zero. If it is below 100 then you need to add ships so that
it is at or above 100. Above 100 and you have more ship capacity than you need, but you will
still only transfer the specified B<resource_hour>, it just means some ships will be idle or not
fully filled.

B<stalled> is true if there are no more of the chain's resource available in storage to push.


=head2 view_waste_chains ( session_id, building_id )

Returns a list of the waste chains currently controlled by this Trade Ministry

 {
    "status" : { ... },
    "waste_chain" : [
      {
        "id" : "id-goes-here",
        "star" : {
          "id" : "id-goes-here",
          "name" : "Sol",
          "x" : 0,
          "y" : -123,
          ...
        },
        "waste_hour" : 10000000,
        "percent_transferred" : 95,
      }
    ]
 }

Note, there is no need to create a waste chain, all planets have a waste chain by default.

There should only be one waste-chain in action, to your local star. There is no point in
setting up a waste-chain to any other star.

The B<waste_hour> is the amount of waste you wish to transfer per hour.

The B<percent_transferred> is the percentage of B<waste_hour> that is actually transferred.
This is based on the number of ships you have servicing the waste. If you have no ships then
the B<percent_transferred> will be zero. If it is below 100 then you need to add ships so that
it is at or above 100. Above 100 and you have more ship capacity than you need, but you will 
still only transfer the specified B<waste_hour>, it just means some ships will be idle or not
fully filled.


=head2 create_supply_chain (session_id, building_id, target_id, resource_type, resource_hour)

Create a new supply chain.

B<target_id> is the ID of the target planet (or space station).

B<building_id> is the identifier of the Trade Ministry building.

B<resource_type> is the resource you want to push, e.g. 'waste','water','gold','energy','apple'

B<resource_hour> is the amount of the resource you want to transfer each hour.

Returns the same as the call to B<view_supply_chains>


=head2 delete_supply_chain (session_id, building_id, supply_chain_id)

Delete the supply chain identified by the B<supply_chain_id>

Returns the same as the call to B<view_supply_chains>


=head2 update_supply_chain ( session_id, building_id, supply_chain_id, resource_type, resource_hour)

Change the B<resource_type> and B<resource_hour> for the supply Chain specified by B<supply_chain_id>

Returns the same as the call to B<view_supply_chains>

Note, the B<percent_transferred> may drop below 100% as a result of changing the amount of
B<resource_hour> if you don't have enough ships to transfer the amount of resources in all
supply chains.

You may set the resource_hour to zero if you want to suspend the supply chain to the target planet.

If you want to remove the supply chain totally then call B<delete_supply_chain>

=head2 update_waste_chain ( session_id, building_id, waste_chain_id, waste_hour)

Change the B<waste_hour> for the Waste Chain specified by B<waste_chain_id>

Returns the same as the call to B<view_waste_chains>

Note, the B<percent_transferred> may drop below 100% as a result of changing the amount of
B<waste_hour> if you don't have enough ships to transfer the full amount of waste.

Note, there is no B<create_waste_chain> because all planets have a waste chain by default.

You may set the B<waste_hour> to zero if you want to stop transferring waste.


=head2 remove_supply_ship_from_fleet (session_id, building_id, ship_id )

Remove a ship from servicing your supply chains and tell it to return to the space port.

 {
   "status" : { ... },
 }

Throws 1009.

=head3 session_id

A Session ID.

=head3 building_id

The unique ID of the Trade Ministry.

=head3 ship_id

The unique ID of the ship you want to remove from the fleet.


=head2 remove_waste_ship_from_fleet (session_id, building_id, ship_id )

Remove a ship from servicing you waste management and tell it to return to the space port.

 {
   "status" : { ... },
 }

Throws 1009.

=head3 session_id

A Session ID.

=head3 building_id

The unique ID of the Trade Ministry.

=head3 ship_id

The unique ID of the ship you want to remove from the fleet.


=head2 get_stored_resources ( session_id, building_id )

Returns a list of the resources you have stored to make it easier to identify what you want to trade.

 {
    "status" : { ... },
    "cargo_space_used_each" : 1,
    "resources" : {
            "water" : 14000,
            "waste" : 393,
            "bauxite" : 47,
            "cheese" : 1193,
            ...
    }
 }
 
=head3 session_id

A session id.

=head3 building_id

The unique id of this building.


=head2 push_items ( session_id, building_id, target_id, items, options )

Allows you to push items between your colonies.

 {
    "status" : { ... },
    "ship" : {
        "name" : "SS Minnow",
        "type" : "cargo_ship",
        "date_arrives" : "01 31 2010 13:09:05 +0600",
        ...
    }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.

=head3 target_id

The unqiue id of the planet that you control, that you want to send resources to.

B<NOTE:> The list of your planets comes back with every empire status message.

=head3 items

An array reference of hash references of items you wish to ship to the target planet. There are five types of items that can be shipped via this mechanism. They are resources, glyphs, plans, prisoners, and ships.

 [
    {
       "type" : "bauxite",
       "quantity" : 10000
    },
    {
       "type" : "prisoner",
       "prisoner_id" : "id-goes-here"
    }
 ]


=over

=item resources

The hash reference for resources looks like:

 {
    "type" : "bauxite",
    "quantity" : 10000
 }

=over

=item type

The type of resource you want to push. Available types are: water, energy, waste, essentia, bean, lapis, potato, apple, root, corn, cider, wheat, bread, soup, chip, pie, pancake, milk, meal, algae, syrup, fungus, burger, shake, beetle, rutile, chromite, chalcopyrite, galena, gold, uraninite, bauxite, goethite, halite, gypsum, trona, kerogen, methane, anthracite, sulfur, zircon, monazite, fluorite, beryl, or magnetite.

=item quantity

The amount of the resource that you want to push.

=back

=item glyphs

The hash reference for glyphs looks like:

 {
    "type" : "glyph",
    "name : "bauxite",
    "quantity" : 3
 }
 
=over

=item type

Must be exactly C<glyph>.

=item name

The type of glyph you want to trade (must be an ore type name).

=item quantity

The number of glyphs of type C<name> that you want to push.

See the C<get_glyph_summary> method for a list of your glyphs.

=back

=item plans

The hash reference for plans looks like this:

 {
    "type" : "plan",
    "plan_type" : "Permanent_AlgaePond",
    "level" : 1,
    "extra_build_level" : 5,
    "quantity" : 4,
 }


=over

=item type

Must be exactly C<plan>.

=item plan_type

Same as returned by get_plan_summary.

=item level

Level of the plan being pushed.

=item extra_build_level

Level of plus to plan.  Note this will be 0 except possibly when the base level is 1.

=item quantity

The number of plans of that you want to push.

See the C<get_plan_summary> method for a list of your plans.

=back


=item prisoners

The hash reference for prisoners looks like:

 {
    "type" : "prisoner",
    "prisoner_id" : "id-goes-here"
 }

=over

=item type

Must be exactly C<prisoner>.

=item prisoner_id

The unique id of the spy that you want to push. See the C<get_prisoners> method for a list of your prisoners.

=back


=item ships

The hash reference for ships looks like:

 {
    "type" : "ship",
    "ship_id" : "id-goes-here"
 }

=over

=item type

Must be exactly C<ship>.

=item ship_id

The unique id of the ship that you want to push. See the C<get_prisoners> method for a list of your prisoners.

=back



=back


=head3 options

A hash reference of options to modify the trade.

=over

=item ship_id

The specific id of a ship you want to use for this push. See C<get_trade_ships> for details.

=item stay

If set to 1 the ship will remain at the target planet instead of making a round trip. However, this requires an available spaceport dock on the target planet.

=back




=head2 report_abuse ( session_id, building_id, trade_id )

Report a trade that you think is abusing the trade system.

 {
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.

=head3 trade_id

The unique id of the trade.




=cut
