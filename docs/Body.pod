=head1 Body Methods

These methods are accessible via the C</body> URL.


=head2 get_status ( session_id, body_id )

Returns detailed statistics about a planet. 

B<NOTE:> You should probably B<never> call this method directly, as it is a wasted call since the data it returns comes back in the status block of every relevant request. See L<Intro/"Status"> for details.

 {
    "server" : { ... },
    "empire" : { ... },
    "body" : {
        "id" : "id-goes-here",
        "x" : -4,
        "y" : 10,
        "star_id" : "id-goes-here",
        "star_name" : "Sol",
        "orbit" : 3,
        "type" : "habitable planet",
        "name" : "Earth",
        "image" : "p13",
        "size" : 67,
        "water" : 900,
        "ore" : {
            "gold" : 3399,
            "bauxite" : 4000,
            ...
        },
        "empire" : { # this section only exists if an empire occupies it
            "id" : "id-goes-here",
            "name" : "Earthlings",
            "alignment" : "ally",   # can be 'ally','self', or 'hostile'
            "is_isolationist" : 1
        },
        "station" : { # only shows up if this planet is under the influence of a space station
            "id" : "id-goes-here",
            "x" : 143,
            "y" : -27,
            "name" : "The Death Star"
        },
        
        --------- if you own the planet the data below will be included ---------
        
        "needs_surface_refresh" : 1, # indicates that the client needs to call get_buildings() because something has changed
        "building_count" : 7,
        "build_queue_size" : 15, # can build 15 at once
        "build_queue_len" : 10,  # have 10 building now
        "plots_available" :60,
        "happiness" : 3939,
        "happiness_hour" : 25,
        "unhappy_date" : "01 13 2014 16:11:21 +0600",  # Only given if happiness is below zero
        "neutral_entry" : "01 13 2014 16:11:21 +0600",  # Earliest time body can enter neutral area
        "propaganda_boost" : 20,
        "food_stored" : 33329,
        "food_capacity" : 40000,
        "food_hour" : 229,
        "energy_stored" : 39931,
        "energy_capacity" : 43000,
        "energy_hour" : 391,
        "ore_hour" 284,
        "ore_capacity" 35000,
        "ore_stored" 1901,
        "waste_hour" : 933,
        "waste_stored" : 9933,
        "waste_capacity" : 13000,
        "water_stored" : 9929,
        "water_hour" : 295,
        "water_capacity" : 51050,   
        "skip_incoming_ships" : 0,   # if set, then the following incoming data is missing.
        "num_incoming_enemy" : 10,   # total number of incoming foreign ships
        "num_incoming_ally" : 1,     # total number of incoming allied ships
        "num_incoming_own : 0,       # total number of incoming own ships from other colonies
        "incoming_enemy_ships" : [ # will only be included when enemy ships are coming to your planet (only the first 20 will be shown)
            {
                "id" : "id-goes-here",
                "date_arrives" : "01 31 2010 13:09:05 +0600",
                "is_own" : 1,                                   # is this from one of our own planets
                "is_ally" : 1                                   # is this from a planet within our alliance
            },
            ...
        ],
        "incoming_ally_ships" : [ # will only be included when allied ships are coming to your planet (only the first 10 will be shown)
            ...
        ],
        "incoming_own_ships" : [ # will only be included when ships from your other colonies are coming to your planet (only the first 10 will be shown)
            ...  
        ],
        
        ----- if the body is a station the follwing information will be included
        "alliance" : { 
            "id" : "id-goes-here",
            "name" : "Imperial Empire" 
        },
        "influence" : {
            "total" : 0,
            "spent" : 0
        }
    }
 }
 
=head3 session_id

A session id.

=head3 body_id

The id of the body you wish to retrieve.


=head2 get_buildings ( session_id, body_id )

Retrieves a list of the buildings on a planet. The surface of all planet's is made up of an 11x11 tile grid stretching from -5 to 5 in both an x and y axis. The planetary command building is always built at 0,0. 

The C<get_body> method (among others) will give you C<size> and C<building_count>. A planet's size is the number of buildings that can be built on it. The building count is the number of buildings you have built so far. The maximum size of any planet is 121 (11x11=121), however just because there are spots remaining doesn't mean you can fill them. Also, sometimes permanent structures such as lakes will occupy a tile space, and can artificially lower the number of buildings you can place on a planet.

The list of building's retreived by this method should be placed on the 11x11 grid, and the extra space should be filled in by blank ground tiles. 

 {
    "buildings" : {
        "id-goes-here" : {
            "name" : "Apple Orchard",
            "x" : 1,
            "y" : -1,
            "url" : "/apple",
            "level" : 3,
            "image" : "apples3",
            "efficiency" : 95,
            "pending_build" : {                            # only included when building is building/upgrading
                "seconds_remaining" : 430,
                "start" : "01 31 2010 13:09:05 +0600",
                "end" : "01 31 2010 18:09:05 +0600"
            },
            "work" : {                                     # only included when building is working (Parks, Waste Recycling, etc)
                "seconds_remaining" : 49,
                "start" : "01 31 2010 13:09:05 +0600",
                "end" : "01 31 2010 18:09:05 +0600"
            }
        },
        "id-goes-here2" : {
            "name" : "Planetary Command",
            "x" : 0,
            "y" : 0,
            "url" : "/command",
            "level" : 1,
            "efficiency" : 100,
            "image" : "command1"
        }
    },
    "body" : {
        "surface_image" : "surface-e"
    },
    "status" : { ... }
 }

Throws 1002 and 1010.

=head3 session_id

A session id.

=head3 body_id

The id of the body you wish to retrieve the buildings on.

=head2 repair_list ( session_id, body_id, building_ids)

Repairs buildings in order of ids gived in array.

Returns similar output to get_buildings, but only ones identified in building_ids

=head3 session_id

A session id.

=head3 body_id

The id of the body you wish to retrieve the buildings on.

=head3 building_ids

An array reference to a list of building ids to be repaired.

=head2 rearrange_buildings ( session_id, body_id, arrangement)

Rearranges all buildings to the coordinates supplied via the arrangment array of hashes.

 {
    "moved" : [
        {
          "id" : building_id,
          "name" : "Building Name",
          "x" : X coord,
          "y" : Y coord
        }
    ],
    "body" : {
        "surface_image" : "surface-e"
    },
    "status" : { ... }
 }

Throws 1002 and 1010.

=head3 session_id

A session id.

=head3 body_id

The id of the body you wish to arrange buildings on.

=head3  arrangement

A array of hashes.
 [
  {
    "id" : building_id,
    "x"  : new X coord,
    "y"  : new Y coord,
  },
  ...
 ]

All buildings being moved need to be supplied.
PCC or Station Command need to be in position 0,0.

=head2 get_buildable ( session_id, body_id, x, y, tag ) 

Provides a list of all the building types that are available to be built on a given space on a planet that are within a specific tag.

 {
    "max_items_in_build_queue" : 6,
    "build_queue" : {
        "max" : 4,
        "current" : 3
    },
    "buildable" : {
        "Wheat Farm" : {
            "url" :"/wheat",
            "build" : {
                "can" : 1,
                "no_plot_use" : 0,
                "cost" : {
                    "food" : 500,
                    "water" : 500,
                    "energy" : 500,
                    "waste" : 500,  # is added to your storage, not spent like the other resources
                    "ore" : 1000,
                    "time" : 1200,
                },
                "extra_level" : 7,  # only shows up for some plan types, skips level 1 and goes straight to this level
                "tags" : ["Now","Resources","Food"],
                "reason" : ""
            },
            "image" : "wheat1",
            "production" : {
                "food_hour" : 1500,
                "energy_hour" : -144,
                "ore_hour" : -1310,
                "water_hour" : -1100,
                "waste_hour" : 133,
                "happiness_hour" : 0,
            }
        },
        ...
    },
    "status" : { ... }
 }

If there are multiple plans for a building, this will return the plan with the highest extra_build_level. The build time cost for 1+X plans will show the time for the +X level.

The C<reason> section provides a little detail about why a building can or cannot be built. It is formatted the same way an exception would be formatted (an array ref of error code, error message, and error data).

The C<tags> section can be used to display the buildable buildings in a way that makes sense to the end user. The tags available are as follows:

=over

=item Now

Can be built right now.

=item Soon

Could be built right now if only there were enough resources in storage.

=item Later

Will eventually become available once you've completed the necessary prerequisites.

=item Plan

This building will be built using a Plan, which means it will cost no resources to build.

=item Infrastructure

Everything that is not a resource building.

=over

=item Intelligence

This building helps you gain information.

=item Happiness

This building helps you gain favor with your citizens.

=item Ships

This building helps you build ships.

=item Colonization

This building helps you colonize other worlds.

=item Construction

This building helps in some way building buildings on your planet surface.

=item Trade

This building allows you to trade good or resources with other players, or assists in trade in some way.

=back

=item Resources

Everything that is not infrastructure.

=over

=item Food

This building either produces or stores food.

=item Ore

This building either produces or stores ore.

=item Water

This building either produces or stores water.

=item Energy

This building either produces or stores energy.

=item Waste

This building either consumes or stores waste.

=item Storage

This building provides storage for one or more of the five resources.

=back

=back

Throws 1002, 1010, 1011, and 1012, and 1013.

=head3 session_id

A session id.

=head3 body_id

The id of the body you wish to retrieve the buildings on.

=head3 x

The x axis of the area on the planet you wish to place the building. Valid values are between -5 and 5 inclusive.

=head3 y

The y axis of the area on the planet you wish to place the building. Valid values are between -5 and 5 inclusive.

=head3 tag

A tag that will limit the list of buildings to return. Required. Cannot be C<Now>, C<Soon>, or C<Later>, but all other tags are fair game.




=head2 rename ( session_id, body_id, name )

Renames a body, provided the empire attached to the session owns the body. Returns a 1 on success.

Throws 1000, 1002 and 1010.

=head3 session_id

A session id.

=head3 body_id

The id of the body you wish to rename.

=head3 name

The new name of the body.



=head2 abandon ( session_id, body_id )

Abandon's a colony, and destroys everything on the planet. Returns a status block.

=head3 session_id

A session id.

=head3 body_id

The unique id of the body you wish to abandon. You cannot abandon your home planet.

=head2 view_laws (session_id, body_id )

B<NOTE:> Pass in a the id of the station, not the id of the parliament building. This is because anyone that wants to should be able to view the laws in this jurisdiction.

Returns a list of the laws.

 {
    "status" : { ... },
    "laws" : [
        {
            "id" : "id-goes-here",
            "name" : "Censure of Jamie Vrbsky",
            "description" : "Jamie Vrbsky is bad at playing Lacuna!",
            "date_enacted" : "01 31 2010 13:09:05 +0600"
        },
        ...
    ]
 }
 
=head3 session_id

A session id.

=head3 body_id

The unique id of the space station.

=cut

