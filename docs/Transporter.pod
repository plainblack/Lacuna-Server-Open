=head1 Transporter Diagram

The Subspace Transporter is a complex beast, so to help you wrap your brain around it we've created a little flow diagram of how the methods come together.

=begin html

<img src="Transporter.png">
<br>
<a href="Transporter.graffle">OmniGraffle Version</a>

=end html

=head1 Transporter Methods

The Subspace Transporter is accessible via the URL C</transporter>. It allows you to transport goods across the vastness of space instantly. The catch is that the planet you're transporting to must also have a transporter, and it burns essentia to use it.

The list of methods below represents changes and additions to the methods that all L<Buildings> share.


=head2 view ( session_id, building_id )

 {
   "building" : { ... },
   "status" : { ... },
   "transport" : {
     "max" : 2500
   }
 }


=head2 add_to_market ( session_id, building_id, offer, ask )

Queues a trade for others to see. In addition to anything offered in your trade, setting up the trade will cost you 1 essentia. Returns:

 {
    "trade_id" : "id-goes-here",
    "status" : { ... },
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of the subspace transporter.

=head3 items

An array reference of hash references of items you wish to trade. There are five types of items that can be traded via this mechanism. They are resources, glyphs, plans, prisoners, and ships.

 [
    {
       "type" : "bauxite",
       "quantity" : 10000
    },
    {
       "type" : "prisoner",
       "prisoner_id" : "id-goes-here"
    }
 ]


=over

=item resources

The hash reference for resources looks like:

 {
    "type" : "bauxite",
    "quantity" : 10000
 }

=over

=item type

The type of resource you want to trade. See C<get_stored_resources> to see what you have available.

=item quantity

The amount of the resource that you want to trade.

=back

=item glyphs

The hash reference for glyphs looks like:

 {
    "type" : "glyph",
    "glyph_id" : "id-goes-here"
 }
 
=over

=item type

Must be exactly C<glyph>.

=item glyph_id

The unique id of the glyph you want to trade. See the C<get_glyphs> method for a list of your glyphs.
 
=back

=item plans

The hash reference for plans looks like:

 {
    "type" : "plan",
    "plan_id" : "id-goes-here"
 }

=over

=item type

Must be exactly C<plan>.

=item plan_id

The unique id of the plan that you want to trade. See the C<get_plans> method for a list of your plans.

=back


=item prisoners

The hash reference for prisoners looks like:

 {
    "type" : "prisoner",
    "prisoner_id" : "id-goes-here"
 }

=over

=item type

Must be exactly C<prisoner>.

=item prisoner_id

The unique id of the spy that you want to trade. See the C<get_prisoners> method for a list of your prisoners.

=back


=item ships

The hash reference for ships looks like:

 {
    "type" : "ship",
    "ship_id" : "id-goes-here"
 }

=over

=item type

Must be exactly C<ship>.

=item ship_id

The unique id of the ship that you want to trade. See the C<get_prisoners> method for a list of your prisoners.

=back

=back

=head3 ask

An number which represents how much essentia you are asking for in this trade. Must be between 0.1 and 100.



=head2 get_ships ( session_id, building_id )

Returns a list of ships that may be traded. Used with the C<add_trade> method.

 {
    "ships" : [
        {
            "id" : "id-goes-here",
            "name" : "Enterprise",
            "type" : "probe",
            "hold_size" : 0,
            "speed" : 3900
        },
        ...
    ],
    "cargo_space_used_each" : 10000,
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.



=head2 get_prisoners ( session_id, building_id )

Returns a list of prisoners that may be traded. Used with the C<add_trade> method.

 {
    "prisoners" : [
        {
            "id" : "id-goes-here",
            "name" : "Jack Bauer",
            "level" : "5"
            "sentence_expires" : "01 31 2010 13:09:05 +0600"
        },
        ...
    ],
    "cargo_space_used_each" : 350,
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.



=head2 get_plans ( session_id, building_id )

Deprecated Method.  Please use get_plan_summary instead

=head2 get_plan_summary ( session_id, building_id )

Returns a list of plans that may be traded in summary form.
Used with the C<add_trade> method.

 {
    "plans" : [
        {
            "name" : "Intelligence Ministry",
            "level" : "7",
            "extra_build_level" : "0",
            "quantity" : "2"
        },
        ...
    ],
    "cargo_space_used_each" : 10000,
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building


=head2 get_glyphs ( session_id, building_id )

This API call is now deprecated, please use get_glyph_summary instead.

=head2 get_glyph_summary ( session_id, building_id )

Returns a summary of all glyphs that may be traded. Used with the C<add_trade> method.

 {
    "glyphs" : [
        {
            "type" : "bauxite",
            "quantity" : 2
        },
        ...
    ],
    "cargo_space_used_each" : 100,
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.


=head2 withdraw_from_market ( session_id, building_id, trade_id )

Remove a trade that you have offered and collect the items up for trade.

 {
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.

=head3 trade_id

The unique id of the trade.



=head2 accept_from_market ( session_id, building_id, trade_id )

Accept a trade offer from the list of available trades. In addition to paying whatever the asking price is, the subspace transporter uses 1 essentia to complete the transaction. See C<view_market>.

Throws 1016.

 {
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.

=head3 trade_id

The unique id of the trade.



=head2 view_market ( session_id, building_id, [ page_number, filter ] )

Displays a list of trades available at the present time.

 {
    "trades" : [
        {
            "date_offered" : "01 31 2010 13:09:05 +0600",
            "id" : "id-goes-here",
            "ask" : 25,     # essentia
            "offer" : [
                "Level 21 spy named Jack Bauer (prisoner)",
                "4,000 bauxite",
                "gold glyph"
            ],
            "empire" : {
                "id" : "id-goes-here",
                "name" : "Earthlings"
            }
        },
        ...
    ],
    "trade_count" : 1047,
    "page_number" : 1,
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.

=head3 page_number

Optional. An integer representing the page of trades (25 per page) to return. Defaults to 1.

=head3 filter

Optional. A string which will narrow the offered trades to those who are offering a specific kind of object, such as ships. Filter options include: food ore water waste energy glyph prisoner ship plan



=head2 view_my_market ( session_id, building_id, [ page_number ] )

Displays a list of trades the current user has posted.

 {
    "trades" : [
        {
            "date_offered" : "01 31 2010 13:09:05 +0600",
            "id" : "id-goes-here",
            "ask" : 25,     # essentia
            "offer" : [
                "Level 21 spy named Jack Bauer (prisoner)",
                "4,000 bauxite",
                "gold glyph"
            ]
        },
        ...
    ],
    "trade_count" : 17,
    "page_number" : 1,
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.

=head3 page_number

An integer representing the page of trades (25 per page) to return. Defaults to 1.




=head2 get_stored_resources ( session_id, building_id )

Returns a list of the resources you have stored to make it easier to identify what you want to trade.

 {
    "status" : { ... },
    "cargo_space_used_each" : 100,
    "resources" : {
            "water" : 14000,
            "waste" : 393,
            "bauxite" : 47,
            "cheese" : 1193,
            ...
    }
 }
 
=head3 session_id

A session id.

=head3 building_id

The unique id of this building.



=head2 push_items ( session_id, building_id, target_id, items )

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.

=head3 target_id

The unqiue id of the planet that you control, that you want to send resources to.

B<NOTE:> The list of your planets comes back with every empire status message.

=head3 items

An array reference of hash references of items you wish to ship to the target planet. There are five types of items that can be shipped via this mechanism. They are resources, glyphs, plans, prisoners, and ships.

 [
    {
       "type" : "bauxite",
       "quantity" : 10000
    },
    {
       "type" : "prisoner",
       "prisoner_id" : "id-goes-here"
    }
 ]


=over

=item resources

The hash reference for resources looks like:

 {
    "type" : "bauxite",
    "quantity" : 10000
 }

=over

=item type

The type of resource you want to push. Available types are: water, energy, waste, essentia, bean, lapis, potato, apple, root, corn, cider, wheat, bread, soup, chip, pie, pancake, milk, meal, algae, syrup, fungus, burger, shake, beetle, rutile, chromite, chalcopyrite, galena, gold, uraninite, bauxite, goethite, halite, gypsum, trona, kerogen, methane, anthracite, sulfur, zircon, monazite, fluorite, beryl, or magnetite.

=item quantity

The amount of the resource that you want to push.

=back

=item glyphs

The hash reference for glyphs looks like:

 {
    "type" : "glyph",
    "glyph_id" : "id-goes-here"
 }
 
=over

=item type

Must be exactly C<glyph>.

=item glyph_id

The unique id of the glyph you want to push. See the C<get_glyphs> method for a list of your glyphs.
 
=back


=item plans

The hash reference for plans looks like:

 {
    "type" : "plan",
    "plan_id" : "id-goes-here"
 }

=over

=item type

Must be exactly C<plan>.

=item plan_id

The unique id of the plan that you want to push. See the C<get_plans> method for a list of your plans.

=back


=item prisoners

The hash reference for prisoners looks like:

 {
    "type" : "prisoner",
    "prisoner_id" : "id-goes-here"
 }

=over

=item type

Must be exactly C<prisoner>.

=item prisoner_id

The unique id of the spy that you want to push. See the C<get_prisoners> method for a list of your prisoners.

=back


=item ships

The hash reference for ships looks like:

 {
    "type" : "ship",
    "ship_id" : "id-goes-here"
 }

=over

=item type

Must be exactly C<ship>.

=item ship_id

The unique id of the ship that you want to push. See the C<get_prisoners> method for a list of your prisoners.

=back



=back




=head2 trade_one_for_one ( session_id, building_id, have, want, quantity )

Lacuna Expanse Corp will do one for one trades of any resource in exchange for 3 essentia.

 {
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.

=head3 have

The name of the resource you have. See C<get_stored_resources> to see what you have.

=head3 want

The name of any resource you want.

=head3 quantity

The amount of resources that will be traded one for one.



=head2 report_abuse ( session_id, building_id, trade_id )

Report a trade that you think is abusing the trade system.

 {
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 building_id

The unique id of this building.

=head3 trade_id

The unique id of the trade.



=cut
