=head1 Inbox Methods

These methods are accessible via the C</inbox> URL.


=head2 view_inbox ( session_id, [ options ] )

Displays a list of the messages in the empire's inbox. Displays 25 messages per page, sorted newest to oldest.

 {
    "messages" : [
        {
            "id" : "id-goes-here",
            "subject" : "Vaxaslim",
            "date" : "01 31 2010 13:09:05 +0600",
            "from" : "Dr. Stephen T. Colbert DFA",
            "from_id" : "id-goes-here",
            "to" : "Jon Stewart",
            "to_id" : "id-goes-here",
            "has_read" : 1,
            "has_replied" : 0,
            "body_preview" : "Just a reminder that Vaxaslim ",
            "tags" : "Correspondence" 
        }
    ],
    "message_count" : 14,
    "status" : { ... }
 }

The C<tags> section allows the user to filter the messages. You can do this either client side or server side. Available tags are:

=over

=item Tutorial

Messages that come from the tutorial system.

=item Correspondence

Messages that are generated by other players, including the tutorial system.

=item Medal

Messages that let you know you've earned a medal.

=item Intelligence

Reports gathered from spies.

=item Alert

Messages letting you know something dire about your empire, usually sabotage by spies.

=item Attack

Messages informing you about attacks (offensive and defensive).

=item Colonization

Messages concerning staking and colonizing planets (including space station conversions).

=item Complaint

Messages regarding planetary complaints (happiness, resource, and pollution warnings).

=item Excavator

Messages about excavator findings (nothing, resources, glyph, plan).

=item Mission

Messages from the Mission Curators.

=item Parliament

Messages that tell you about Parliamentary proceedings (votes needed, votes passed, votes failed, etc).

=item Probe

Messages concerning detected probes.

=item Spies

Non-intelligence related spy reports.

=item Trade

Messages related to trades.

=back
 
Throws 1002, 1006.

=head3 session_id

A session id.

=head3 options

A hash reference of extra options.

=head4 page_number

An integer representing which page of the inbox you'd like to view. Defaults to C<1>.

=head4 tags

An array reference of tags. Only messages containing these tags will be displayed in the results.


=head2 view_archived ( session_id, [ options ])

Exactly the same as C<view_inbox> except that it shows archived messages instead.


=head2 view_trashed ( session_id, [ options ])

Exactly the same as C<view_inbox> except that it shows trashed messages instead.


=head2 view_sent ( session_id, [ options ] )

Exactly the same as C<view_inbox> except that it shows sent messages instead.

=head2 view_unread ( session_id, [ options ] )

Exactly the same as C<view_inbox> except that it shows only the unread messages in the inbox.



=head2 read_message ( session_id, message_id )

Retrieves a message. Marks it read if it hasn't been already.

 {
    "message" : {
        "id" : "id-goes-here",
        "from" : "Dr. Stephen T. Colbert DFA",
        "from_id" : "id-goes-here",
        "to" : "Jon Stewart",
        "to_id" : "id-goes-here",
        "subject" : "Vaxaslim",
        "body" : "Just a reminder that Vaxaslim may cause involuntary narnia adventures.",
        "date" : "01 31 2010 13:09:05 +0600",
        "has_read" : 1,
        "has_replied" : 0,
        "has_archived" : 0,
        "has_trashed" : 0,
        "in_reply_to" : "",
        "recipients" : ["John Stewart"],
        "tags" : ["Correspondence"],
        "attachments" : { # no more than one of each type per email
            "image" : {
                "url" : "http://www.example.com/path/image.jpg",
                "title" : "Some Title",
                "link" : "http://www.lacunaexpanse.com/", # optional link to somewhere
            "link" : {
                "url" : "http://www.lacunaexpanse.com/",
                "label" : "The Lacuna Expanse Website"
            }
            "table" : [
                [ "Hostname", "IP Address" ], # first row is always a header
                [ "example.lacunaexpanse.com", "192.168.1.24" ],
                ...
            ],
            "map" : {
                "surface" : "surface-6",
                "buildings" : [
                    {
                        "x" : -3,
                        "y" : 4,
                        "image" : "apples4"
                    }
                    ...
                ]
            }
        }
    },
    status  => { ... }
 }
 
C<recipients> is the complete list of users who received the message, whereas C<to> is the user that owns this particular copy of the message.
 
Throws 1002, 1006, 1010.

=head3 session_id

A session id.

=head3 message_id

A message_id that was returned using C<view_inbox> or one of the other view_ methods.




=head2 archive_messages ( session_id, message_ids )
 
Archives a list of messages. Returns:

 {
    "success" : ["id-goes-here","id-goes-here"],
    "failure" : ["id-goes-here","id-goes-here"],
    "status" : { ... }
 }

Archived messages are marked as read.

B<NOTE:> You cannot archive sent messages. You'll get a failure if the message is either already archived, or it's a message that cannot be archived, like a message in your sent folder.

=head3 session_id

A session id.

=head3 message_ids

An array reference of message ids.





=head2 trash_messages ( session_id, message_ids )
 
Trashed messages are marked as read.

Trashes a list of messages. Returns:

 {
    "success" : ["id-goes-here","id-goes-here"],
    "status" : { ... }
 }

B<NOTE:> You cannot trash messages sent to others.  Only messages sent to you.

=head3 session_id

A session id.

=head3 message_ids

An array reference of message ids.





=head2 trash_messages_where ( session_id, { spec => [ options, options, ... ] } )

Trashed messages are marked as read.

Trashes all messages matching the options. Returns:

 {
    "deleted" : ["id-goes-here","id-goes-here"],
    "deleted_count" : 17340,
    "status" : { ... }
 }

=head3 session_id

A session id.

=head3 named parameters

The named parameter list takes the following keys:

=head4 spec

A list of specifications for deletion.  Each specification is another
object (hash).  A message must match all keys provided to be deleted ("AND").  
It is an error to specify no options.  To delete all non-archived messages,
simply use C<subject> of C<%>.

Compounding multiple delete requests can be done by passing in additional
hash references.

Example:

    { tags => [ 'Attack', 'Alert' ], subject => 'BFG%' }

This will delete any message with either the C<Attack> or C<Alert> tags,
if the subject starts with I<BFG>.  Attack and alert messages that do not
start with "BFG" will not be deleted.

Keys are:

=head4 tags

An array reference of tags.  Messages with any of these tags will be
eligible for deletion.  Default is any and all tags (no tag evaluation).
Tags are given as a set, so are automatically "or"ed together.

=head4 subject

A subject line to match.  Use C<%> to represent zero or more characters
in that position, such as "Pass:%" to select all messages whose subject
starts with "Pass:".  Default is essentially any subject (no subject
evaluation).

The subject may also be passed in as an array object, in which case it
is treated as tags above: a set to exactly match as a set of "or"ed values.

=head4 from

An array reference of from empire names.  Full names are required.

=head4 return_ids

If this is present and set to a true value, all deleted message IDs will
be saved and returned.  Gathering the IDs can, for large deletions, result
in extra server work, and also increase the size of the returned JSON
dramatically.  This should only be set if you need the IDs for deleting from
an off-site message store, such as a local database, or an active message
view (UI).

If this is not set, the C<deleted> key will not be returned at all.

The C<deleted_count> key will still be present either way.


=head2 send_message ( session_id, recipients, subject, body, [ options ] )

Sends a message to other players. 

Throws 1002, 1005, 1006.

=head3 session_id

A session id.

=head3 recipients

A comma separated string of empire names. In addition to an empire name, C<@ally> is available as a shortcut to send to all members of an alliance.

B<NOTE:> You may want to expose a search option here using L<Empire/"find">.

=head3 subject

A subject for the message. It cannot contain any special characters, and must be less than 100 characters in length, and cannot contain &, @, ;, <, or >.

=head3 body

The body of the message. It cannot contain any special characters, and must be less than 200,000 characters in length, and cannot contain < or >.

=head3 options

A hash reference of extra options.

=head4 in_reply_to

A message id. If this message is in reply to another message, then set this option to the message id of the original message.

=head4 forward

A message id. If this is set, then the attachments of the message id specified will be sent along with the new message.The text of the message will not automatically be forwarded, if that is desired, it is the client's responsibility to include it in the body of the new message.
 
 
 
=head1 Message Formatting

The messages generated by the system have built in formatting commands to aid the user in figuring things out. These are items like displaying icons for UI consistency. Bolding important items, etc.

=head2 Commands

These commands should be supported by all inbox clients. The commands are as follows.

=head3 Bold

Bolds a segment of text by wrapping the text in asterisks.

 *bold*

Example Perl based regular expression for formatting it as HTML.

 s/\*(\w.*?\w)\*/<b>$1<\/b>/xsg
 

=head3 Food Icon

Represents an in game food resource icon.

 {food}

Example Perl based regular expression for formatting it as HTML.

 s/\{food\}/<img>/xsg
 
 
=head3 Water Icon

Represents an in game water resource icon.

 {water}

Example Perl based regular expression for formatting it as HTML.

 s/\{water\}/<img>/xsg
 
 
=head3 Ore Icon

Represents an in game ore resource icon.

 {ore}

Example Perl based regular expression for formatting it as HTML.

 s/\{ore\}/<img>/xsg
 
 
 
=head3 Energy Icon

Represents an in game energy resource icon.

 {energy}

Example Perl based regular expression for formatting it as HTML.

 s/\{energy\}/<img>/xsg
 
 

=head3 Waste Icon

Represents an in game waste resource icon.

 {waste}

Example Perl based regular expression for formatting it as HTML.

 s/\{waste\}/<img>/xsg
 
 
=head3 Happiness Icon

Represents an in game food resource icon.

 {happiness}

Example Perl based regular expression for formatting it as HTML.

 s/\{happiness\}/<img>/xsg
 

=head3 Time Icon

Represents an in game time icon that shows how long something will take.

 {time}

Example Perl based regular expression for formatting it as HTML.

 s/\{time\}/<img>/xsg
 


=head3 Build Icon

Represents an the in game build (tractor) icon.

 {build}

Example Perl based regular expression for formatting it as HTML.

 s/\{build\}/<img>/xsg
 
 
=head3 Essentia Icon

Represents an in game Essentia icon.

 {essentia}

Example Perl based regular expression for formatting it as HTML.

 s/\{essentia\}/<img>/xsg
 
 
=head3 Plots Icon

Represents an in game plots icon.

 {plots}

Example Perl based regular expression for formatting it as HTML.

 s/\{plots\}/<img>/xsg
 
 
=head3 URLs and Links

URLs are formatted using brackets rather than braces to make them stand out from all the other macros for icons and whatnot.

 [http://www.lacunaexpanse.com]

Example Perl based regular expression for formatting it as HTML.

 s/\[((?:http|https):[a-z0-9\.\/\-\_]+)\]/<a href="$1">$1<\/a>/xisg

B<NOTE:> It's very important that you exclude as many characters as possible from the URL so that there is less of a chance of a malicious attack from the formatted version. Therefore the link should only allow for C<a-z 0-9 - _ . />. It should not accept C<% ? & :> or other funky formatting that could be used against the user. If it encounters that, it should ignore it rather than formatting it. In addition it should start with http:// or https://. All other protocols should be ignored. 
 
 
=head3 Empire Profile Link

The empire profile link is used by automated messages in the system to link users to the profile of an empire wherever that empire is mentioned in the text.

 {Empire 999 United Federation}
 
 {Empire id name}

Example Perl based regular expression for formatting it as HTML.

 s/\{Empire\s(-*\d+)\s(.*?)\}/<a href="?empire_id=$1">$2<\/a>/xisg

B<NOTE:> The link generated by this is of course bogus. It is only used as an example, your application would have to create whatever it needs to display the empire's profile which displayed the data from L<Empire/"view_public_profile">.


=head3 Star Map Link

Allows direct linking from emails to a location on the star map.

 {Starmap 432 -46 Earth}

 {Starmap x y name}

Example Perl based regular expression for formatting it as HTML.

 s/\{Starmap\s(-*\d+)\s(\d+)\s(.*?)\}/<a href="?x=$1&y=$2">$3<\/a>/xisg

B<NOTE:> The link generated by this is of course bogus. It is only used as an example, your application would have to create whatever it needs to display the location on the map.


=head3 Planet Link

Allows direct linking to the surface view of a planet under the player's control.

 {Planet 99999 Earth}
 
 {Planet id name}

Example Perl based regular expression for formatting it as HTML.

 s/\{Planet\s(-*\d+)\s(.*?)\}/<a href="?planet_id=$1">$2<\/a>/xisg

B<NOTE:> The link generated by this is of course bogus. It is only used as an example, your application would have to create whatever it needs to display planet's surface.


=head3 Alliance Link

Allows direct linking to an alliance profile.

 {Alliance 3393 Federation of Planets}

 {Alliance id name}

Example Perl based regular expression for formatting it as HTML.

 s/\{Alliance\s(-*\d+)\s(.*?)\}/<a href="?alliance_id=$1">$2<\/a>/xisg

B<NOTE:> The link generated by this is of course bogus. It is only used as an example, your application would have to create whatever it needs to display the alliance's profile which displayed the data from L<Alliance/"view_profile">.


=head3 Parliament Vote

Allows a direct link to a vote in parliament, so that the alliance member need not actually go to the space station and then the parliament building, and then find the proper item to vote on.

 {VoteYes 393744 4948 9411}

 {VoteYes space_station_body_id parliament_id proposition_id}

Example Perl based regular expression for formatting it as HTML.

 s/\{VoteYes\s(-*\d+)\s(-*\d+)\s(-*\d+)\}/<a href="/cast_vote?body_id=$1&building_id=$2&proposition_id=$3">Yes!<\/a>/xisg

 {VoteNo 393744 4948 9411}

 {VoteNo space_station_body_id parliament_id proposition_id}

Example Perl based regular expression for formatting it as HTML.

 s/\{VoteNo\s(-*\d+)\s(-*\d+)\s(-*\d+)\}/<a href="/cast_vote?body_id=$1&building_id=$2&proposition_id=$3">No!<\/a>/xisg

B<NOTE:> The links generated by this are of course bogus. It is only used as an example, your application would have to create whatever it needs to display the voting links that get posted to L<Parliament/"cast_vote">.

=head2 FAQ

=over

=item Why a domain specific language (DSL)?

There's no way to build a rich text editor that would work across all the different platforms we support, but we need these formatting tools for our in-game messages, like the tutorial system. Users need an icon to go with the word, so we need to be able to inject that into the text message. In addition, our support people need to be able to send links to users to point them to wiki pages, forums, etc. And though they could just copy the link out of the message, some platforms require opening a separate browser app, so by using a DSL we can alert that client to the fact that this is a link that should open in a browser app.

=item Why not just use HTML?

To some extent the previous question should answer that. Beyond that though, let's enumerate all the reasons HTML sucks for this application.

=over

=item *

Injection attacks are rampant on the internet. If we allow HTML to find its way into the mail system, no one is safe.

=item *

Not all platforms we intend to support will be able to render HTML.

=item *

How would do the C<{Empire id name}> command in HTML? You need to be able to open a window in the app, which means you need to be able to call an API.

=item *

Which is easier to type:

 <b>bold</b>

Or

 *bold*

Which do you think a user is more likely to get right and therefore be useful to them?

=item *

How would you do C<{food}> in HTML? Sure you can use an image tag, but what does it point to? Do you really want to download the icon from a public source in your iPhone app, when the iPhone app already has the icon locally? And if a user wanted to include the icon in their message, which is easier to type:

 {food}

Or

 <img src="https://s3.amazonaws.com/us1.lacunaexpanse.com/assets/ui/s/food.png" alt="food" title="food">

=item *

In short, HTML is long, tedious, ugly, vulnerable, and a terrible language for the types of applications we have in Lacuna.

=back

=back

=cut
