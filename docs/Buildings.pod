=head1 Building Descriptions

Your app can download a copy of the building descriptions from C<http://servername.lacunaexpanse.com/resources.json>. Your app should cache this file, and only download a new copy if it has changed. We do not include this information in L<Body/"get_buildings"> because it's the same on every request for every empire and would add a lot of bandwidth for nothing.

=head1 Building Methods

All buildings have some methods in common. This is a description of the methods available from each building.

B<NOTE:> To use these methods, you must use the URL of the individual building types. 
You can find the list of building types at the bottom of this page.


=head2 build

Adds this building to the planet's build queue.

Accepts either fixed arguments or a hash of named parameters

 ( session_id, planet_id, x, y )
 ( parameter_hash )
  
Throws 1002, 1010, 1011, and 1012, and 1013.

=head3 session_id

A session id.

=head3 planet_id

The id of the planet you wish to build on.

=head3 x

The x axis of the area on the planet you wish to place the building. Valid values are between -5 and 5 inclusive.

=head3 y

The y axis of the area on the planet you wish to place the building. Valid values are between -5 and 5 inclusive.

=head3 RESPONSE

 {
   "building" : {
     "id" : "id-goes-here",
     "pending_build" : {
       "seconds_remaining" : 430,
       "start" : "01 31 2010 13:09:05 +0600",
       "end" : "01 31 2010 18:09:05 +0600"
     },
     "level" : 0,
   "status" : { ... }
 }


=head2 view

Retrieves the propertios of the building

Accepts either fixed arguments or a hash of named parameters

 ( session_id, building_id )
 ( parameter_hash )
  

Throws 1002 and 1010.

=head3 session_id

A session id.

=head3 building_id

The id of the building.

=head3 RESPONSE

 {
   "building" : {
     "id" : "id-goes-here",
     "name" : "Planetary Command",
     "image" : "command6",
     "level" : 6,
     "x" : 0,
     "y", 0,
     "food_hour" : 500,
     "food_capacity" : 500,
     "energy_hour" : -44,
     "energy_capacity" : 500,
     "ore_hour" : -310,
     "ore_capacity" : 500,
     "water_hour" : -100,
     "water_capacity" : 500,
     "waste_hour" : 33,
     "waste_capacity" : 500,
     "happiness_hour" : 0,
     "efficiency" : 100,
     "repair_costs" : {
       "food" : 0,
       "water" : 0,
       "energy" : 0,
       "ore" : 0
     },
     "pending_build" : {
       "seconds_remaining" : 430,
       "start" : "01 31 2010 13:09:05 +0600",
       "end" : "01 31 2010 18:09:05 +0600"
     },
     "work" : {
       "seconds_remaining" : 49,
       "start" : "01 31 2010 13:09:05 +0600",
       "end" : "01 31 2010 18:09:05 +0600"
     },
     "downgrade" : {
       "can" : 1,
       "reason" : "",
       "image" : "command5",
     },
     "upgrade" : {
       "can" : 0,
       "reason" : [1011, "Not enough resources.", "food"],
       "cost" : {
         "food" : 500,
         "water" : 500,
         "energy" : 500,
         "waste" : 500,
         "ore" : 1000,
         "time" : 1200,
       },
       "production" : {
         "food_hour" : 1500,
         "food_capacity" : 500,
         "energy_hour" : -144,
         "energy_capacity" : 500,
         "ore_hour" : -1310,
         "ore_capacity" : 500,
         "water_hour" : -1100,
         "water_capacity" : 500,
         "waste_hour" : 133,
         "waste_capacity" : 500,
         "happiness_hour" : 0,
       },
       "image" : "command7"
     }
   }
   "status" : { ... }
 }


B<pending_build> is only returned when a building is building or upgrading.

B<work> is only returned when a building is working (Parks, Waste Recycling etc).



=head2 upgrade

Adds the requested upgrade to the build queue.


Accepts either fixed arguments or a hash of named parameters

 ( session_id, building_id )
 ( parameter_hash )
  

Throws 1002, 1010, 1011, and 1012, and 1013.

=head3 session_id

A session id.

=head3 building_id

The id of the building you wish to retrieve.

=head3 RESPONSE

 {
   "building" : {
     "id" : "id-goes-here",
     "pending_build" : {
       "seconds_remaining" : 430,
       "start" : "01 31 2010 13:09:05 +0600",
       "end" : "01 31 2010 18:09:05 +0600"
     },
     "level" : 1
   }
   "status" : { ... }
 }



=head2 demolish

Allows you to instantly destroy a building.

Accepts either fixed arguments or a hash of named parameters

 ( session_id, building_id )
 ( parameter_hash )
  

Throws 1012.

=head3 session_id

A session id.

=head3 building_id

The id of the building you wish to demolish.

=head3 RESPONSE

 {
   "status" : { ... }
 }
 
B<SPECIAL EXCEPTION:> If the user downgrades a level 1 building, then the Client needs to eliminate that 
object from the user's view. This method will return the view of the level 1 building, because that's 
it's intended course of action, but the client needs to handle this gracefully for the user.
 


=head2 downgrade ( session_id, building_id )

Downgrades a building by one level.

Accepts either fixed arguments or a hash of named parameters

 ( session_id, building_id )
 ( parameter_hash )
  

Throws 1012.

=head3 session_id

A session id.

=head3 building_id

The id of the building you wish to demolish.

=head3 RESPONSE

Returns the same as C<view>



=head2 get_stats_for_level ( session_id, building_id, level )

This method is for power users and script writers. It will return the projected stats of a building 
at a certain level. The building must already exist on the planet, because where it exists and who 
it is owned by affects the stats of the building.

Accepts either fixed arguments or a hash of named parameters

 ( session_id, building_id, level )
 ( parameter_hash )
  

Throws 1009.

=head3 session_id

A session id.

=head3 building_id

The id of the building you wish to get stats for.

=head3 level

The level that you want stats of the building for, between 1 and 30

=head3 RESPONSE

 {
   "building" : {
     "id" : "id-goes-here",
     "name" : "Planetary Command",
     "image" : "command6",
     "level" : 6,
     "food_hour" : 500,
     "food_capacity" : 500,
     "energy_hour" : -44,
     "energy_capacity" : 500,
     "ore_hour" : -310,
     "ore_capacity" : 500,
     "water_hour" : -100,
     "water_capacity" : 500,
     "waste_hour" : 33,
     "waste_capacity" : 500,
     "happiness_hour" : 0,
     "upgrade" : {
       "cost" : {
         "food" : 500,
         "water" : 500,
         "energy" : 500,
         "waste" : 500,
         "ore" : 1000,
         "time" : 1200,
       },
       "production" : {
         "food_hour" : 1500,
         "food_capacity" : 500,
         "energy_hour" : -144,
         "energy_capacity" : 500,
         "ore_hour" : -1310,
         "ore_capacity" : 500,
         "water_hour" : -1100,
         "water_capacity" : 500,
         "waste_hour" : 133,
         "waste_capacity" : 500,
         "happiness_hour" : 0,
       },
       "image" : "command7"
     }
   }
   "status" : { ... }
 }



=head2 repair

Restores a building's efficiency to 100%. See the C<repair_costs> section of the C<view> method to see how 
many resources will be spent in this process.

Accepts either fixed arguments or a hash of named parameters

 ( session_id, building_id )
 ( parameter_hash )
  

Throws 1009.

=head3 session_id

A session id.

=head3 building_id

The id of the building you wish to get stats for.

=head3 RESPONSE

Returns B<view>



=head1 Space Station Modules

Space stations have buildings too (called Modules), but they don't behave exactly the same as ground 
based buildings. See the L<Modules> documentation for more information.


=head1 Building Types

Below is a list of the different types of structures that can be built on planets in Lacuna. They all 
share the above methods, but many have additional methods available.

=over

=item L<Algae>

=item L<AlgaePond>

=item L<AmalgusMeadow>

=item L<Apple>

=item L<Archaeology>

=item L<AtmosphericEvaporator>

=item L<Beach>

=item L<Bean>

=item L<Beeldeban>

=item L<BeeldebanNest>

=item L<BlackHoleGenerator>

=item L<Bread>

=item L<Burger>

=item L<Capitol>

=item L<Cheese>

=item L<Chip>

=item L<Cider>

=item L<CitadelOfKnope>

=item L<CloakingLab>

=item L<Corn>

=item L<CornMeal>

=item L<CrashedShipSite>

=item L<Crater>

=item L<Dairy>

=item L<Denton>

=item L<DentonBrambles>

=item L<DeployedBleeder>

=item L<Development>

=item L<DistributionCenter>

=item L<Embassy>

=item L<EnergyReserve>

=item L<Entertainment>

=item L<Espionage>

=item L<EssentiaVein>

=item L<Fission>

=item L<Fissure>

=item L<FoodReserve>

=item L<Fusion>

=item L<GasGiantLab>

=item L<GasGiantPlatform>

=item L<GeneticsLab>

=item L<Geo>

=item L<GeoThermalVent>

=item L<GratchsGauntlet>

=item L<GreatBallOfJunk>

=item L<Grove>

=item L<HallsOfVrbansk>

=item L<Hydrocarbon>

=item L<Intelligence>

=item L<IntelTraining>

=item L<InterDimensionalRift>

=item L<JunkHengeSculpture>

=item L<KalavianRuins>

=item L<KasternsKeep>

=item L<Lake>

=item L<Lagoon>

=item L<Lapis>

=item L<LapisForest>

=item L<LibraryOfJith>

=item L<LostCityOfTyleon>

=item L<LuxuryHousing>

=item L<Malcud>

=item L<MalcudField>

=item L<MassadsHenge>

=item L<MayhemTraining>

=item L<MercenariesGuild>

=item L<MetalJunkArches>

=item L<Mine>

=item L<MiningMinistry>

=item L<MissionCommand>

=item L<MunitionsLab>

=item L<NaturalSpring>

=item L<Network19>

=item L<Observatory>

=item L<OracleOfAnid>

=item L<OreRefinery>

=item L<OreStorage>

=item L<Oversight>

=item L<Pancake>

=item L<PantheonOfHagness>

=item L<Park>

=item L<Pie>

=item L<PilotTraining>

=item L<PlanetaryCommand>

=item L<PoliticsTraining>

=item L<Potato>

=item L<Propulsion>

=item L<PyramidJunkSculpture>

=item L<Ravine>

=item L<RockyOutcrop>

=item L<Sand>

=item L<SAW>

=item L<Security>

=item L<Shake>

=item L<Shipyard>

=item L<Singularity>

=item L<Soup>

=item L<SpaceJunkPark>

=item L<SpacePort>

=item L<SpaceStationLab>

=item L<Stockpile>

=item L<SubspaceSupplyDepot>

=item L<SupplyPod>

=item L<Syrup>

=item L<TempleOfTheDrajilites>

=item L<TerraformingLab>

=item L<TerraformingPlatform>

=item L<TheDillonForge>

=item L<TheftTraining>

=item L<ThemePark>

=item L<Trade>

=item L<Transporter>

=item L<University>

=item L<Volcano>

=item L<WasteDigester>

=item L<WasteEnergy>

=item L<WasteExchanger>

=item L<WasteRecycling>

=item L<WasteSequestration>

=item L<WasteTreatment>

=item L<WaterProduction>

=item L<WaterPurification>

=item L<WaterReclamation>

=item L<WaterStorage>

=item L<Wheat>

=back

=cut

