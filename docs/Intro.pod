=head1 Introduction

This document can introduce you to interacting with the Lacuna Expanse game server. 

=head1 SERVERS

The list of playable servers can be read from L<http://www.lacunaexpanse.com/servers.json>.

 [
  {
   "name" : "NA1",
   "uri" : "https://na1.lacunaexpanse.com/",
   "status" : "Open",
   "location" : "United States"
  }
  ...
 ]

Each server in this list is an instance of the game, an individual universe separated from the others. Your app will need to allow users to select which server they want to interact with form this list.

=head1 JSON-RPC

The Lacuna Expanse uses a JSON-RPC 2.0 based API. You can read more about JSON-RPC 2.0 at L<http://groups.google.com/group/json-rpc/web/json-rpc-2-0>.

You can access these methods either as HTTP POSTs or GETs. 

=head2 HTTP GET

You can simply access any method using HTTP GET. Here's an example URL:

 https://game.lacunaexpanse.com/empire?jsonrpc=2.0&id=1&method=is_name_available&params=["Lacuna Expanse Corp"]

The C<https://game.lacunaexpanse.com/> part gets you to the server.

Then C</empire> lets you interact with the L<Empire> module. See below for a complete list.

To make it JSON-RPC 2.0 compatible, you must include the C<jsonrpc=2.0&id=1> part.

Then specify the method you wish to call with C<method=is_name_available>. 

And finally pass in whatever parameters you need like C<params=["Lacuna Expanse Corp"]>. Parameters need to be encoded in JSON. By default all methods require an array of parameters. However, some will specifically request a hash reference of parameters; that would look like C<params={"this":"that","foo":"bar"}>

B<NOTE:> You must URL encode the params. If you don't, you'll get a parse error from the server.

=head2 HTTP POST

Most programming languages will have a JSON-RPC 2.0 client you can either use directly, or download from the internet. These will use HTTP POST. If you need to manually create a POST, it would look like:

 POST,https://game.lacunaexpanse.com/species
 {
    "jsonrpc":"2.0",
    "id":1,
    "method":"is_name_available",
    "params":["Human"]
 }

B<NOTE:> It's important to make the distinction here that when you're sending a POST, you're not sending URL parameters. You're sending a full POST body. If you format it with parameters like a GET request you'll get a parse error in response.

=head3 Use Post When Possible

HTTP POST is the preferred method of execution. The reasons for this are:

=over

=item *

You can make multiple method calls in the same request, per the JSON-RPC 2.0 specification.

=item *

Depending upon the HTTP Client, you'll have somewhere between 512 and 2048 bytes to send the request on a GET, but it can be unlimited on a POST. 

=item * 

If you use an HTTP GET, you'll need to URL Encode the params, but with POST you don't need to do that.

=back

=head2 Response

Either way you'll get a response back with either a result or an error message.

=head3 Result

If you make a successful request you'll get a response like:

 { 
    "jsonrpc" : "2.0", 
    "id" : 1, 
    "result" : 0 
 }

=head3 Error

If an exception is thrown you'll get an error response. It's a hash containing a code, message, and data section.

 { 
    "jsonrpc" : "2.0", 
    "id" : 1, 
    "error" : {
        "code" : 1000, 
        "message" : "Name not available.", 
        "data" : null
    } 
 }

B<NOTE:> If you get a JSON-RPC error, then the web server will also give you a 500 HTTP error code. 


=head2 RPC Limit

You may only make a number of calls up to the RPC Limit in a given 24 hour period. The current limit is 10,000 on us1. They are also rate limited to 60 calls per minute on us1. The counter resets roughly (give or take 60 minutes) at midnight GMT. Your RPC calls are counted across all clients you use and your own programs.

If you find yourself needing more RPC calls than the limit allows then you are likely making a lot of redundant requests. For example body.get_buildings() returns the entire list of buildings, and a time as to when their stats will change. So instead of calling every building on every planet every time your program looks something up, cache it until it changes.



=head1 Status

Most methods will provide a status block as part of the response. This is used to update the user interface and alert the user to things. The status block looks like this:

 {
    ...
    "status" : {
        "server" : {
            "time" : "01 31 2010 13:09:05 +0600",
            "version" : 2.0604,
            "announcement" : 1, # see the Announcement API
            "rpc_limit" : 2500, # max calls per day, compare to empire rpc_count
            "star_map_size" : {
                "x" : [ -15, 15 ],
                "y" : [ -15, 15 ],
                "z" : [ -15, 15 ]
            }
        },
        "empire" : { # this block is not always included
            See get_status() in Empire
        },
        "body" : { # this block is not always included
            See get_status() in Body
        }
    }
 }

=head1 Modules

=over

=item L<ErrorCodes>

A list of the error codes that might be returned by various modules.

=item L<ApiKeys>

You'll need a key to use the API.

=item L<Empire>

Methods for account and empire management.

=item L<Alliance>

Methods for public alliance data.

=item L<Inbox>

Methods for message management.

=item L<Stats>

Methods for game server statistics.

=item L<Map>

Methods for interacting with the star and systems maps.

=item L<Body>

Methods for interacting with planets and other stellar bodies.

=item L<Buildings>

Methods for interacting with the buildings on a body.

=item L<Payments>

How to allow users to purchase Essentia from your app.

=item L<Chat>

Integrate the in-game chat system with your app.

=item L<Announcement>

Display a serverwide announcement.

=item L<Captcha>

Request and solve CAPTCHAs

=back

=cut
